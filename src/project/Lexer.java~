/* The following code was generated by JFlex 1.4.3 on 27/09/23 06:35 PM */

package project;
import static project.TokenType.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 27/09/23 06:35 PM from the specification file
 * <tt>D:/ITESCAM/Octavo Semestre/Programs/lexer_project/src/project/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\2\0\1\4\22\0\1\1\1\0\1\12\1\2"+
    "\4\0\1\16\1\17\1\5\1\26\1\22\1\10\1\11\1\27\12\7"+
    "\1\20\1\21\1\23\1\25\1\24\2\0\1\6\1\54\1\50\5\6"+
    "\1\62\3\6\1\61\5\6\1\53\7\6\1\0\1\13\2\0\1\6"+
    "\1\0\1\40\1\32\1\35\1\43\1\46\1\47\1\56\1\51\1\34"+
    "\1\6\1\55\1\33\1\44\1\45\1\42\1\30\1\6\1\52\1\36"+
    "\1\37\1\31\1\41\1\60\1\6\1\57\1\6\1\14\1\0\1\15"+
    "\u1faa\0\2\63\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\1\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\20\7"+
    "\1\5\2\2\1\5\2\0\1\26\1\0\1\27\1\30"+
    "\1\31\1\32\5\7\1\33\20\7\1\34\2\7\2\2"+
    "\2\0\1\10\1\26\4\7\1\35\14\7\1\36\7\7"+
    "\1\2\1\0\2\7\1\37\5\7\1\40\1\41\1\42"+
    "\2\7\1\43\1\44\3\7\1\45\2\7\1\46\1\7"+
    "\1\0\11\7\1\47\1\50\2\7\1\51\1\52\1\53"+
    "\2\7\1\54\1\7\1\55\1\7\1\56\1\57\1\7"+
    "\1\60\1\7\1\61\7\7\1\62\1\63\1\7\1\64"+
    "\3\7\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\150\0\320\0\64\0\u0104"+
    "\0\u0138\0\u016c\0\u01a0\0\64\0\64\0\64\0\64\0\64"+
    "\0\64\0\64\0\u01d4\0\u0208\0\u023c\0\u0270\0\64\0\u02a4"+
    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444"+
    "\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\64"+
    "\0\u05e4\0\u0618\0\150\0\u064c\0\u01a0\0\64\0\u0680\0\64"+
    "\0\64\0\64\0\64\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784"+
    "\0\u0104\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0"+
    "\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90"+
    "\0\u0ac4\0\u0104\0\u0af8\0\u0b2c\0\64\0\u0b60\0\u0618\0\u0b94"+
    "\0\u064c\0\u01a0\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0104\0\u0c98"+
    "\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38"+
    "\0\u0e6c\0\u0ea0\0\u0ed4\0\u0104\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4"+
    "\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u0104"+
    "\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u0104\0\u0104\0\u0104"+
    "\0\u1248\0\u127c\0\u0104\0\u0104\0\u12b0\0\u12e4\0\u1318\0\u0104"+
    "\0\u134c\0\u1380\0\u0104\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484"+
    "\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u0104\0\u0104"+
    "\0\u15f0\0\u1624\0\u0104\0\u0104\0\u0104\0\u1658\0\u168c\0\u0104"+
    "\0\u16c0\0\u0104\0\u16f4\0\u0104\0\u0104\0\u1728\0\u0104\0\u175c"+
    "\0\u0104\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8"+
    "\0\u0104\0\u0104\0\u18fc\0\u0104\0\u1930\0\u1964\0\u1998\0\u0104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\2\1\13\1\2\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\10\1\31\1\10\1\32\1\10\1\33\1\34"+
    "\1\10\1\35\1\10\1\36\1\37\1\10\1\40\1\41"+
    "\1\42\1\43\1\10\1\44\2\10\1\45\2\10\1\46"+
    "\1\47\1\50\65\0\1\3\1\0\2\3\61\0\1\51"+
    "\2\0\1\52\57\0\1\3\1\0\1\53\1\3\65\0"+
    "\2\10\20\0\33\10\10\0\1\11\1\0\1\54\61\0"+
    "\1\11\54\0\3\55\2\0\5\55\1\56\1\57\50\55"+
    "\25\0\1\60\63\0\1\61\63\0\1\62\64\0\1\63"+
    "\43\0\2\10\20\0\1\10\1\64\1\10\1\65\27\10"+
    "\7\0\2\10\20\0\12\10\1\66\7\10\1\67\10\10"+
    "\7\0\2\10\20\0\15\10\1\70\1\10\1\71\13\10"+
    "\7\0\2\10\20\0\7\10\1\72\6\10\1\73\2\10"+
    "\1\74\11\10\7\0\2\10\20\0\22\10\1\75\10\10"+
    "\7\0\2\10\20\0\12\10\1\76\20\10\7\0\2\10"+
    "\20\0\12\10\1\77\3\10\1\100\14\10\7\0\2\10"+
    "\20\0\10\10\1\101\22\10\7\0\2\10\20\0\3\10"+
    "\1\102\27\10\7\0\2\10\20\0\10\10\1\103\1\10"+
    "\1\104\20\10\7\0\2\10\20\0\12\10\1\105\6\10"+
    "\1\106\11\10\7\0\2\10\20\0\4\10\1\107\26\10"+
    "\7\0\2\10\20\0\5\10\1\110\4\10\1\111\20\10"+
    "\7\0\2\10\20\0\12\10\1\112\20\10\7\0\2\10"+
    "\20\0\16\10\1\113\14\10\7\0\2\10\20\0\14\10"+
    "\1\114\16\10\1\0\3\51\1\115\1\116\57\51\5\117"+
    "\1\120\56\117\7\0\1\121\54\0\3\55\1\0\6\55"+
    "\1\122\1\57\50\55\6\0\2\10\20\0\2\10\1\123"+
    "\30\10\7\0\2\10\20\0\10\10\1\124\22\10\7\0"+
    "\2\10\20\0\12\10\1\125\20\10\7\0\2\10\20\0"+
    "\16\10\1\126\14\10\7\0\2\10\20\0\7\10\1\127"+
    "\23\10\7\0\2\10\20\0\10\10\1\130\1\10\1\131"+
    "\7\10\1\132\10\10\7\0\2\10\20\0\7\10\1\133"+
    "\23\10\7\0\2\10\20\0\12\10\1\134\20\10\7\0"+
    "\2\10\20\0\1\10\1\135\31\10\7\0\2\10\20\0"+
    "\4\10\1\136\26\10\7\0\2\10\20\0\1\10\1\137"+
    "\31\10\7\0\2\10\20\0\17\10\1\140\13\10\7\0"+
    "\2\10\20\0\4\10\1\141\26\10\7\0\2\10\20\0"+
    "\6\10\1\142\24\10\7\0\2\10\20\0\3\10\1\143"+
    "\27\10\7\0\2\10\20\0\22\10\1\144\10\10\7\0"+
    "\2\10\20\0\3\10\1\145\27\10\7\0\2\10\20\0"+
    "\10\10\1\146\22\10\7\0\2\10\20\0\13\10\1\147"+
    "\17\10\7\0\2\10\20\0\22\10\1\150\10\10\7\0"+
    "\2\10\20\0\1\10\1\151\31\10\7\0\2\10\20\0"+
    "\15\10\1\152\15\10\7\0\2\10\20\0\10\10\1\153"+
    "\22\10\4\0\1\115\60\0\2\117\1\154\2\117\1\155"+
    "\56\117\6\0\2\10\20\0\3\10\1\156\27\10\7\0"+
    "\2\10\20\0\27\10\1\157\3\10\7\0\2\10\20\0"+
    "\3\10\1\160\27\10\7\0\2\10\20\0\10\10\1\161"+
    "\22\10\7\0\2\10\20\0\7\10\1\162\23\10\7\0"+
    "\2\10\20\0\1\163\32\10\7\0\2\10\20\0\4\10"+
    "\1\164\26\10\7\0\2\10\20\0\24\10\1\165\6\10"+
    "\7\0\2\10\20\0\30\10\1\166\2\10\7\0\2\10"+
    "\20\0\16\10\1\167\14\10\7\0\2\10\20\0\13\10"+
    "\1\170\17\10\7\0\2\10\20\0\2\10\1\171\30\10"+
    "\7\0\2\10\20\0\4\10\1\172\26\10\7\0\2\10"+
    "\20\0\15\10\1\173\15\10\7\0\2\10\20\0\16\10"+
    "\1\174\14\10\7\0\2\10\20\0\6\10\1\175\24\10"+
    "\7\0\2\10\20\0\12\10\1\176\20\10\7\0\2\10"+
    "\20\0\22\10\1\177\10\10\7\0\2\10\20\0\16\10"+
    "\1\200\14\10\7\0\2\10\20\0\16\10\1\201\14\10"+
    "\7\0\2\10\20\0\15\10\1\202\15\10\7\0\2\10"+
    "\20\0\1\10\1\203\31\10\7\0\2\10\20\0\26\10"+
    "\1\204\4\10\1\0\5\117\1\0\63\117\1\205\56\117"+
    "\6\0\2\10\20\0\4\10\1\206\26\10\7\0\2\10"+
    "\20\0\23\10\1\207\7\10\7\0\2\10\20\0\25\10"+
    "\1\210\5\10\7\0\2\10\20\0\4\10\1\211\26\10"+
    "\7\0\2\10\20\0\23\10\1\212\7\10\7\0\2\10"+
    "\20\0\15\10\1\213\15\10\7\0\2\10\20\0\10\10"+
    "\1\214\22\10\7\0\2\10\20\0\3\10\1\215\27\10"+
    "\7\0\2\10\20\0\15\10\1\216\15\10\7\0\2\10"+
    "\20\0\16\10\1\217\14\10\7\0\2\10\20\0\22\10"+
    "\1\220\10\10\7\0\2\10\20\0\10\10\1\221\22\10"+
    "\7\0\2\10\20\0\16\10\1\222\14\10\7\0\2\10"+
    "\20\0\13\10\1\223\17\10\7\0\2\10\20\0\16\10"+
    "\1\224\14\10\1\0\2\117\1\52\2\117\1\205\56\117"+
    "\6\0\2\10\20\0\5\10\1\225\25\10\7\0\2\10"+
    "\20\0\12\10\1\226\20\10\7\0\2\10\20\0\16\10"+
    "\1\227\14\10\7\0\2\10\20\0\5\10\1\230\25\10"+
    "\7\0\2\10\20\0\12\10\1\231\20\10\7\0\2\10"+
    "\20\0\26\10\1\232\4\10\7\0\2\10\20\0\5\10"+
    "\1\233\25\10\7\0\2\10\20\0\16\10\1\234\14\10"+
    "\7\0\2\10\20\0\16\10\1\235\14\10\7\0\2\10"+
    "\20\0\5\10\1\236\25\10\7\0\2\10\20\0\15\10"+
    "\1\237\15\10\7\0\2\10\20\0\1\10\1\240\31\10"+
    "\7\0\2\10\20\0\22\10\1\241\10\10\7\0\2\10"+
    "\20\0\1\10\1\242\31\10\7\0\2\10\20\0\25\10"+
    "\1\243\5\10\7\0\2\10\20\0\7\10\1\244\23\10"+
    "\7\0\2\10\20\0\15\10\1\245\15\10\7\0\2\10"+
    "\20\0\15\10\1\246\15\10\7\0\2\10\20\0\26\10"+
    "\1\247\4\10\7\0\2\10\20\0\16\10\1\250\14\10"+
    "\7\0\2\10\20\0\13\10\1\251\17\10\7\0\2\10"+
    "\20\0\13\10\1\252\17\10\7\0\2\10\20\0\22\10"+
    "\1\253\10\10\7\0\2\10\20\0\22\10\1\254\10\10"+
    "\7\0\2\10\20\0\12\10\1\255\20\10\7\0\2\10"+
    "\20\0\1\10\1\256\31\10\7\0\2\10\20\0\15\10"+
    "\1\257\15\10\7\0\2\10\20\0\13\10\1\260\17\10"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6604];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\4\1\7\11\4\1\1\11"+
    "\20\1\1\11\3\1\2\0\1\11\1\0\4\11\31\1"+
    "\1\11\1\1\2\0\34\1\1\0\27\1\1\0\53\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int fila = 1;
    private int columna = 1;

    private Token newToken(TokenType type, String text) {
        Token token = new Token(type, text, fila, columna);
        columna += text.length();
        return token;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 52: 
          { return newToken(TokenType.CHARACTER, yytext());
          }
        case 54: break;
        case 7: 
          { return  newToken(TokenType.IDENTIFICADOR, yytext());
          }
        case 55: break;
        case 3: 
          { return newToken(TokenType.ASIGNACION_DE_COLOR, yytext());
          }
        case 56: break;
        case 11: 
          { return newToken(TokenType.LLAVE_DE_CERRADURA, yytext());
          }
        case 57: break;
        case 49: 
          { return newToken(TokenType.BREAKER, yytext());
          }
        case 58: break;
        case 17: 
          { return newToken(TokenType.MENOR_QUE, yytext());
          }
        case 59: break;
        case 24: 
          { return newToken(TokenType.MAYOR_O_IGUAL_QUE, yytext());
          }
        case 60: break;
        case 31: 
          { return newToken(TokenType.BOOLEANO, yytext());
          }
        case 61: break;
        case 23: 
          { return newToken(TokenType.MENOR_O_IGUAL_QUE, yytext());
          }
        case 62: break;
        case 53: 
          { return newToken(TokenType.BACKGROUND, yytext());
          }
        case 63: break;
        case 43: 
          { return newToken(TokenType.PUBLIC, yytext());
          }
        case 64: break;
        case 48: 
          { return newToken(TokenType.SCREEN, yytext());
          }
        case 65: break;
        case 6: 
          { return newToken(TokenType.MULTIPLICACION, yytext());
          }
        case 66: break;
        case 30: 
          { return newToken(TokenType.FOR, yytext());
          }
        case 67: break;
        case 26: 
          { return newToken(TokenType.OPERADOR_DE_AUMENTO, yytext());
          }
        case 68: break;
        case 41: 
          { return newToken(TokenType.SOUND, yytext());
          }
        case 69: break;
        case 10: 
          { return newToken(TokenType.LLAVE_DE_APERTURA, yytext());
          }
        case 70: break;
        case 33: 
          { return newToken(TokenType.TRUE, yytext());
          }
        case 71: break;
        case 12: 
          { return  newToken(TokenType.PARENTESIS_DE_APERTURA, yytext());
          }
        case 72: break;
        case 47: 
          { return newToken(TokenType.DEFINE, yytext());
          }
        case 73: break;
        case 39: 
          { return newToken(TokenType.FALSE, yytext());
          }
        case 74: break;
        case 1: 
          { return newToken(TokenType.ERROR_TOKEN_DESCONOCIDO, yytext());
          }
        case 75: break;
        case 13: 
          { return  newToken(TokenType.LLAVE_DE_CERRADURA, yytext());
          }
        case 76: break;
        case 32: 
          { return newToken(TokenType.SHOW, yytext());
          }
        case 77: break;
        case 16: 
          { return newToken(TokenType.COMA, yytext());
          }
        case 78: break;
        case 21: 
          { return newToken(TokenType.DIVISION, yytext());
          }
        case 79: break;
        case 20: 
          { return newToken(TokenType.SUMA, yytext());
          }
        case 80: break;
        case 19: 
          { return newToken(TokenType.ASIGNACION, yytext());
          }
        case 81: break;
        case 51: 
          { return newToken(TokenType.STOP_SOUND, yytext());
          }
        case 82: break;
        case 8: 
          { return newToken(TokenType.NUMERO, yytext());
          }
        case 83: break;
        case 22: 
          { return newToken(TokenType.CADENA, yytext());
          }
        case 84: break;
        case 44: 
          { return newToken(TokenType.STATIC, yytext());
          }
        case 85: break;
        case 28: 
          { return newToken(TokenType.GO, yytext());
          }
        case 86: break;
        case 4: 
          { fila++; columna=1;
          }
        case 87: break;
        case 40: 
          { return newToken(TokenType.COLOR, yytext());
          }
        case 88: break;
        case 15: 
          { return newToken(TokenType.PUNTO_Y_COMA, yytext());
          }
        case 89: break;
        case 45: 
          { return newToken(TokenType.STRING, yytext());
          }
        case 90: break;
        case 29: 
          { return newToken(TokenType.INT, yytext());
          }
        case 91: break;
        case 50: 
          { return newToken(TokenType.PLAY_SOUND, yytext());
          }
        case 92: break;
        case 35: 
          { return newToken(TokenType.MAIN, yytext());
          }
        case 93: break;
        case 38: 
          { return newToken(TokenType.MENU, yytext());
          }
        case 94: break;
        case 14: 
          { return  newToken(TokenType.DOS_PUNTOS, yytext());
          }
        case 95: break;
        case 36: 
          { return newToken(TokenType.ELSE, yytext());
          }
        case 96: break;
        case 25: 
          { return newToken(TokenType.IGUALACION, yytext());
          }
        case 97: break;
        case 27: 
          { return newToken(TokenType.IF, yytext());
          }
        case 98: break;
        case 42: 
          { return newToken(TokenType.IMAGE, yytext());
          }
        case 99: break;
        case 18: 
          { return newToken(TokenType.MAYOR_QUE, yytext());
          }
        case 100: break;
        case 37: 
          { return newToken(TokenType.HIDE, yytext());
          }
        case 101: break;
        case 46: 
          { return newToken(TokenType.DOUBLE, yytext());
          }
        case 102: break;
        case 34: 
          { return newToken(TokenType.VOID, yytext());
          }
        case 103: break;
        case 9: 
          { return newToken(TokenType.RESTA, yytext());
          }
        case 104: break;
        case 2: 
          { 
          }
        case 105: break;
        case 5: 
          { fila++; columna = 1;
          }
        case 106: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
