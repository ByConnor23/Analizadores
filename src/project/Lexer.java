/* The following code was generated by JFlex 1.4.3 on 22/10/23 06:16 PM */

package project;
import static project.TokenType.*;
import java.util.UUID;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/10/23 06:16 PM from the specification file
 * <tt>D:/ITESCAM/Octavo Semestre/Programs/lexer_project/src/project/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\75\1\3\2\0\1\4\22\0\1\1\1\0\1\21\1\2"+
    "\4\0\1\35\1\36\1\5\1\27\1\40\1\10\1\32\1\42\12\31"+
    "\1\15\1\37\1\22\1\41\1\23\1\20\1\0\1\7\1\65\1\62"+
    "\3\43\2\30\1\73\3\30\1\72\5\30\1\64\6\30\1\11\1\6"+
    "\1\16\1\14\1\17\1\30\1\0\1\12\1\46\1\51\1\56\1\60"+
    "\1\61\1\67\1\63\1\50\1\30\1\66\1\47\1\57\1\26\1\55"+
    "\1\44\1\30\1\25\1\52\1\53\1\45\1\54\1\71\1\30\1\70"+
    "\1\13\1\33\1\24\1\34\u1faa\0\2\74\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\7\1\11\1\1\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\20\7\1\2\2\26\1\0\1\7\1\15\2\0"+
    "\1\27\1\30\1\31\1\32\1\0\1\15\1\0\1\33"+
    "\5\7\1\34\20\7\1\35\2\7\2\26\3\0\1\7"+
    "\1\27\1\0\2\15\4\7\1\36\14\7\1\37\7\7"+
    "\1\26\2\0\1\7\1\0\1\15\3\7\1\40\4\7"+
    "\1\41\1\42\1\43\2\7\1\44\1\45\3\7\1\46"+
    "\2\7\1\47\1\7\2\0\1\7\1\0\1\15\11\7"+
    "\1\50\1\51\2\7\1\52\1\53\1\0\2\54\1\55"+
    "\2\7\1\56\1\57\2\7\1\60\1\61\1\7\1\62"+
    "\1\0\1\7\1\63\3\7\1\0\4\7\1\0\1\64"+
    "\1\65\1\7\1\66\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\67\13\0\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\370\0\76\0\u0136"+
    "\0\u0174\0\u01b2\0\u01f0\0\76\0\u022e\0\u026c\0\u02aa\0\u02e8"+
    "\0\u0326\0\76\0\76\0\76\0\76\0\76\0\76\0\u0364"+
    "\0\76\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516"+
    "\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706"+
    "\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u022e"+
    "\0\u08f6\0\76\0\76\0\76\0\76\0\u0934\0\u0972\0\u09b0"+
    "\0\76\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u01f0\0\u0b24"+
    "\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14"+
    "\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u01f0"+
    "\0\u0f04\0\u0f42\0\76\0\u0f80\0\u07fe\0\u0fbe\0\u0ffc\0\u103a"+
    "\0\u022e\0\u1078\0\u10b6\0\u09b0\0\u10f4\0\u1132\0\u1170\0\u11ae"+
    "\0\u01f0\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360"+
    "\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u01f0\0\u14d4\0\u1512"+
    "\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702"+
    "\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u01f0\0\u18b4"+
    "\0\u18f2\0\u1930\0\u196e\0\u01f0\0\u01f0\0\u01f0\0\u19ac\0\u19ea"+
    "\0\u01f0\0\u01f0\0\u1a28\0\u1a66\0\u1aa4\0\u01f0\0\u1ae2\0\u1b20"+
    "\0\u01f0\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2"+
    "\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2"+
    "\0\u01f0\0\u01f0\0\u1f00\0\u1f3e\0\u01f0\0\u01f0\0\u1f7c\0\u01f0"+
    "\0\76\0\u01f0\0\u1fba\0\u1ff8\0\u01f0\0\u01f0\0\u2036\0\u2074"+
    "\0\u01f0\0\u01f0\0\u20b2\0\u01f0\0\u20f0\0\u212e\0\u01f0\0\u216c"+
    "\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c"+
    "\0\u01f0\0\u01f0\0\u239a\0\u01f0\0\u23d8\0\u2416\0\u2454\0\u2492"+
    "\0\u24d0\0\u250e\0\u254c\0\u01f0\0\u258a\0\u25c8\0\u2606\0\u2644"+
    "\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\11\1\13\1\2\1\14\3\2\1\15"+
    "\1\16\1\17\1\2\2\13\1\20\1\13\1\21\1\2"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\11\1\32\1\13\1\33\1\13\1\34\1\11\1\35"+
    "\1\36\1\37\1\13\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\11\1\13\1\47\2\13\1\50\1\51"+
    "\1\6\1\52\77\0\1\3\73\0\1\3\2\0\1\53"+
    "\2\0\1\54\73\0\2\6\67\0\2\6\7\0\1\55"+
    "\75\0\1\56\1\0\1\13\1\56\1\13\11\0\2\13"+
    "\1\0\1\13\1\56\11\0\1\56\2\13\1\56\2\13"+
    "\1\56\4\13\1\56\1\13\3\56\2\13\1\56\6\13"+
    "\33\0\1\57\53\0\1\13\1\0\3\13\11\0\2\13"+
    "\1\0\2\13\11\0\31\13\2\0\3\60\2\0\11\60"+
    "\1\61\2\60\1\62\54\60\41\0\1\63\75\0\1\64"+
    "\63\0\1\65\55\0\1\66\2\0\1\66\16\0\1\67"+
    "\1\70\10\0\1\66\2\0\1\66\2\0\1\66\4\0"+
    "\1\66\1\0\3\66\2\0\1\66\51\0\1\71\43\0"+
    "\1\13\1\0\3\13\11\0\2\13\1\0\2\13\11\0"+
    "\2\13\1\72\1\13\1\73\24\13\11\0\1\56\1\0"+
    "\1\13\1\56\1\13\11\0\1\74\1\13\1\0\1\13"+
    "\1\56\11\0\1\56\2\13\1\56\2\13\1\56\3\13"+
    "\1\75\1\56\1\13\3\56\2\13\1\56\6\13\11\0"+
    "\1\13\1\0\3\13\11\0\1\13\1\76\1\0\2\13"+
    "\11\0\16\13\1\77\12\13\11\0\1\13\1\0\3\13"+
    "\11\0\2\13\1\0\2\13\11\0\10\13\1\100\4\13"+
    "\1\101\2\13\1\102\10\13\11\0\1\13\1\0\3\13"+
    "\11\0\1\103\1\13\1\0\2\13\11\0\31\13\11\0"+
    "\1\13\1\0\3\13\11\0\2\13\1\0\2\13\11\0"+
    "\12\13\1\104\16\13\11\0\1\56\1\0\1\13\1\56"+
    "\1\13\11\0\2\13\1\0\1\13\1\56\11\0\1\56"+
    "\2\13\1\56\2\13\1\56\3\13\1\105\1\56\1\13"+
    "\1\106\2\56\2\13\1\56\6\13\11\0\1\13\1\0"+
    "\1\13\1\107\1\13\11\0\2\13\1\0\2\13\11\0"+
    "\31\13\11\0\1\56\1\0\1\13\1\56\1\13\11\0"+
    "\2\13\1\0\1\13\1\56\11\0\1\56\2\13\1\56"+
    "\1\110\1\13\1\56\4\13\1\56\1\13\3\56\2\13"+
    "\1\56\6\13\11\0\1\56\1\0\1\13\1\111\1\13"+
    "\11\0\2\13\1\0\1\13\1\56\11\0\1\56\2\13"+
    "\1\56\2\13\1\56\3\13\1\112\1\56\1\13\3\56"+
    "\2\13\1\56\6\13\11\0\1\56\1\0\1\13\1\56"+
    "\1\13\11\0\2\13\1\0\1\13\1\56\11\0\1\56"+
    "\2\13\1\56\2\13\1\56\3\13\1\113\1\56\1\13"+
    "\3\56\1\114\1\13\1\56\6\13\11\0\1\13\1\0"+
    "\3\13\11\0\2\13\1\0\2\13\11\0\5\13\1\115"+
    "\23\13\11\0\1\13\1\0\3\13\11\0\2\13\1\0"+
    "\2\13\11\0\6\13\1\116\3\13\1\117\16\13\11\0"+
    "\1\13\1\0\3\13\11\0\2\13\1\0\2\13\11\0"+
    "\12\13\1\120\16\13\11\0\1\13\1\0\3\13\11\0"+
    "\2\13\1\0\2\13\11\0\15\13\1\121\13\13\11\0"+
    "\1\13\1\0\3\13\11\0\2\13\1\0\2\13\11\0"+
    "\14\13\1\122\14\13\3\0\1\3\1\0\2\6\67\0"+
    "\1\6\1\52\3\53\1\123\1\124\71\53\5\125\1\126"+
    "\70\125\10\0\1\127\74\0\1\130\1\0\1\13\1\130"+
    "\1\13\11\0\2\13\1\0\1\13\1\130\11\0\1\130"+
    "\2\13\1\130\2\13\1\130\4\13\1\130\1\13\3\130"+
    "\2\13\1\130\6\13\33\0\1\57\1\70\43\0\3\60"+
    "\1\0\12\60\1\61\2\60\1\131\54\60\7\0\1\132"+
    "\2\0\1\132\16\0\1\132\11\0\1\132\2\0\1\132"+
    "\2\0\1\132\4\0\1\132\1\0\3\132\2\0\1\132"+
    "\17\0\1\132\2\0\1\132\16\0\1\133\1\70\10\0"+
    "\1\132\2\0\1\132\2\0\1\132\4\0\1\132\1\0"+
    "\3\132\2\0\1\132\41\0\1\134\53\0\1\13\1\0"+
    "\3\13\11\0\2\13\1\0\2\13\11\0\3\13\1\135"+
    "\25\13\11\0\1\13\1\0\1\13\1\136\1\13\11\0"+
    "\2\13\1\0\2\13\11\0\31\13\11\0\1\13\1\0"+
    "\3\13\11\0\2\13\1\0\2\13\11\0\15\13\1\137"+
    "\13\13\11\0\1\13\1\0\3\13\11\0\2\13\1\0"+
    "\2\13\11\0\12\13\1\140\16\13\11\0\1\13\1\0"+
    "\3\13\11\0\2\13\1\0\2\13\11\0\10\13\1\141"+
    "\20\13\11\0\1\13\1\0\1\13\1\142\1\13\11\0"+
    "\1\143\1\13\1\0\2\13\11\0\12\13\1\144\16\13"+
    "\11\0\1\13\1\0\3\13\11\0\2\13\1\0\2\13"+
    "\11\0\10\13\1\145\20\13\11\0\1\13\1\0\3\13"+
    "\11\0\2\13\1\0\2\13\11\0\12\13\1\146\16\13"+
    "\11\0\1\13\1\0\3\13\11\0\2\13\1\0\2\13"+
    "\11\0\2\13\1\147\26\13\11\0\1\13\1\0\3\13"+
    "\11\0\2\13\1\0\2\13\11\0\5\13\1\150\23\13"+
    "\11\0\1\13\1\0\3\13\11\0\2\13\1\0\2\13"+
    "\11\0\2\13\1\151\26\13\11\0\1\130\1\0\1\13"+
    "\1\130\1\13\11\0\2\13\1\0\1\13\1\130\11\0"+
    "\1\130\2\13\1\130\2\13\1\130\4\13\1\130\1\13"+
    "\1\130\1\152\1\130\2\13\1\130\6\13\11\0\1\13"+
    "\1\0\3\13\11\0\2\13\1\0\2\13\11\0\5\13"+
    "\1\153\23\13\11\0\1\13\1\0\3\13\11\0\2\13"+
    "\1\0\2\13\11\0\7\13\1\154\21\13\11\0\1\130"+
    "\1\0\1\13\1\130\1\13\11\0\2\13\1\0\1\13"+
    "\1\130\11\0\1\130\2\13\1\130\1\155\1\13\1\130"+
    "\4\13\1\130\1\13\3\130\2\13\1\130\6\13\11\0"+
    "\1\13\1\0\3\13\11\0\1\156\1\13\1\0\2\13"+
    "\11\0\31\13\11\0\1\13\1\0\3\13\11\0\2\13"+
    "\1\0\2\13\11\0\4\13\1\157\24\13\11\0\1\13"+
    "\1\0\1\13\1\160\1\13\11\0\2\13\1\0\2\13"+
    "\11\0\31\13\11\0\1\13\1\0\3\13\11\0\2\13"+
    "\1\0\2\13\11\0\13\13\1\161\15\13\11\0\1\13"+
    "\1\0\3\13\11\0\1\162\1\13\1\0\2\13\11\0"+
    "\31\13\11\0\1\13\1\0\3\13\11\0\2\13\1\0"+
    "\2\13\11\0\2\13\1\163\26\13\11\0\1\13\1\0"+
    "\3\13\11\0\1\13\1\164\1\0\2\13\11\0\31\13"+
    "\11\0\1\13\1\0\1\13\1\165\1\13\11\0\2\13"+
    "\1\0\2\13\11\0\31\13\5\0\1\123\72\0\2\125"+
    "\1\166\2\125\1\167\70\125\11\0\1\170\73\0\1\171"+
    "\1\0\1\13\1\171\1\13\11\0\2\13\1\0\1\13"+
    "\1\171\11\0\1\171\2\13\1\171\2\13\1\171\4\13"+
    "\1\171\1\13\3\171\2\13\1\171\6\13\11\0\1\172"+
    "\2\0\1\172\16\0\1\172\11\0\1\172\2\0\1\172"+
    "\2\0\1\172\4\0\1\172\1\0\3\172\2\0\1\172"+
    "\17\0\1\172\2\0\1\172\16\0\1\173\1\70\10\0"+
    "\1\172\2\0\1\172\2\0\1\172\4\0\1\172\1\0"+
    "\3\172\2\0\1\172\17\0\1\13\1\0\3\13\11\0"+
    "\2\13\1\0\2\13\11\0\4\13\1\174\24\13\11\0"+
    "\1\13\1\0\3\13\11\0\2\13\1\0\2\13\11\0"+
    "\25\13\1\175\3\13\11\0\1\13\1\0\1\13\1\176"+
    "\1\13\11\0\2\13\1\0\2\13\11\0\31\13\11\0"+
    "\1\13\1\0\3\13\11\0\2\13\1\0\2\13\11\0"+
    "\4\13\1\177\24\13\11\0\1\13\1\0\3\13\11\0"+
    "\2\13\1\0\2\13\11\0\10\13\1\200\20\13\11\0"+
    "\1\13\1\0\3\13\11\0\2\13\1\0\2\13\11\0"+
    "\5\13\1\201\23\13\11\0\1\13\1\0\3\13\11\0"+
    "\2\13\1\0\2\13\11\0\1\13\1\202\27\13\11\0"+
    "\1\13\1\0\3\13\11\0\2\13\1\0\2\13\11\0"+
    "\22\13\1\203\6\13\11\0\1\13\1\0\3\13\11\0"+
    "\2\13\1\0\2\13\11\0\26\13\1\204\2\13\11\0"+
    "\1\13\1\0\3\13\11\0\2\13\1\0\2\13\11\0"+
    "\15\13\1\205\13\13\11\0\1\13\1\0\3\13\11\0"+
    "\2\13\1\0\2\13\11\0\13\13\1\206\15\13\11\0"+
    "\1\13\1\0\3\13\11\0\2\13\1\0\2\13\11\0"+
    "\3\13\1\207\25\13\11\0\1\171\1\0\1\13\1\171"+
    "\1\13\11\0\2\13\1\0\1\13\1\171\11\0\1\171"+
    "\2\13\1\171\1\13\1\210\1\171\4\13\1\171\1\13"+
    "\3\171\2\13\1\171\6\13\11\0\1\13\1\0\3\13"+
    "\11\0\1\13\1\211\1\0\2\13\11\0\31\13\11\0"+
    "\1\13\1\0\3\13\11\0\2\13\1\0\2\13\11\0"+
    "\15\13\1\212\13\13\11\0\1\13\1\0\3\13\11\0"+
    "\2\13\1\0\2\13\11\0\7\13\1\213\21\13\11\0"+
    "\1\13\1\0\3\13\11\0\2\13\1\0\2\13\11\0"+
    "\12\13\1\214\16\13\11\0\1\13\1\0\3\13\11\0"+
    "\1\215\1\13\1\0\2\13\11\0\31\13\11\0\1\13"+
    "\1\0\3\13\11\0\2\13\1\0\2\13\11\0\15\13"+
    "\1\216\13\13\11\0\1\13\1\0\3\13\11\0\2\13"+
    "\1\0\2\13\11\0\15\13\1\217\13\13\11\0\1\13"+
    "\1\0\3\13\11\0\1\13\1\220\1\0\2\13\11\0"+
    "\31\13\11\0\1\13\1\0\3\13\11\0\2\13\1\0"+
    "\2\13\11\0\2\13\1\221\26\13\11\0\1\13\1\0"+
    "\3\13\11\0\2\13\1\0\2\13\11\0\24\13\1\222"+
    "\4\13\2\0\5\125\1\0\75\125\1\223\70\125\12\0"+
    "\1\224\72\0\1\225\1\0\1\13\1\225\1\13\11\0"+
    "\2\13\1\0\1\13\1\225\11\0\1\225\2\13\1\225"+
    "\2\13\1\225\4\13\1\225\1\13\3\225\2\13\1\225"+
    "\6\13\11\0\1\226\2\0\1\226\16\0\1\226\11\0"+
    "\1\226\2\0\1\226\2\0\1\226\4\0\1\226\1\0"+
    "\3\226\2\0\1\226\17\0\1\226\2\0\1\226\16\0"+
    "\1\227\1\70\10\0\1\226\2\0\1\226\2\0\1\226"+
    "\4\0\1\226\1\0\3\226\2\0\1\226\17\0\1\13"+
    "\1\0\3\13\11\0\2\13\1\0\2\13\11\0\5\13"+
    "\1\230\23\13\11\0\1\13\1\0\3\13\11\0\2\13"+
    "\1\0\2\13\11\0\21\13\1\231\7\13\11\0\1\13"+
    "\1\0\3\13\11\0\2\13\1\0\2\13\11\0\23\13"+
    "\1\232\5\13\11\0\1\13\1\0\3\13\11\0\2\13"+
    "\1\0\2\13\11\0\5\13\1\233\23\13\11\0\1\13"+
    "\1\0\3\13\11\0\1\13\1\234\1\0\2\13\11\0"+
    "\31\13\11\0\1\13\1\0\3\13\11\0\2\13\1\0"+
    "\2\13\11\0\21\13\1\235\7\13\11\0\1\13\1\0"+
    "\1\13\1\236\1\13\11\0\2\13\1\0\2\13\11\0"+
    "\31\13\11\0\1\13\1\0\3\13\11\0\2\13\1\0"+
    "\2\13\11\0\4\13\1\237\24\13\11\0\1\13\1\0"+
    "\3\13\11\0\1\13\1\240\1\0\2\13\11\0\31\13"+
    "\11\0\1\13\1\0\3\13\11\0\2\13\1\0\2\13"+
    "\11\0\15\13\1\241\13\13\11\0\1\13\1\0\3\13"+
    "\11\0\1\242\1\13\1\0\2\13\11\0\31\13\11\0"+
    "\1\13\1\0\1\13\1\243\1\13\11\0\2\13\1\0"+
    "\2\13\11\0\31\13\11\0\1\13\1\0\3\13\11\0"+
    "\2\13\1\0\2\13\11\0\15\13\1\244\13\13\11\0"+
    "\1\13\1\0\3\13\11\0\2\13\1\0\2\13\11\0"+
    "\13\13\1\245\15\13\11\0\1\13\1\0\3\13\11\0"+
    "\2\13\1\0\2\13\11\0\15\13\1\246\13\13\2\0"+
    "\2\125\1\54\2\125\1\223\70\125\10\0\1\247\74\0"+
    "\1\250\1\0\1\13\1\250\1\13\11\0\2\13\1\0"+
    "\1\13\1\250\11\0\1\250\2\13\1\250\2\13\1\250"+
    "\4\13\1\250\1\13\3\250\2\13\1\250\6\13\11\0"+
    "\1\251\2\0\1\251\16\0\1\251\11\0\1\251\2\0"+
    "\1\251\2\0\1\251\4\0\1\251\1\0\3\251\2\0"+
    "\1\251\17\0\1\251\2\0\1\251\16\0\1\57\1\70"+
    "\10\0\1\251\2\0\1\251\2\0\1\251\4\0\1\251"+
    "\1\0\3\251\2\0\1\251\17\0\1\13\1\0\3\13"+
    "\11\0\2\13\1\0\2\13\11\0\6\13\1\252\22\13"+
    "\11\0\1\13\1\0\3\13\11\0\2\13\1\0\2\13"+
    "\11\0\12\13\1\253\16\13\11\0\1\13\1\0\3\13"+
    "\11\0\2\13\1\0\2\13\11\0\15\13\1\254\13\13"+
    "\11\0\1\13\1\0\3\13\11\0\2\13\1\0\2\13"+
    "\11\0\6\13\1\255\22\13\11\0\1\13\1\0\3\13"+
    "\11\0\2\13\1\0\2\13\11\0\24\13\1\256\4\13"+
    "\11\0\1\13\1\0\3\13\11\0\2\13\1\0\2\13"+
    "\11\0\12\13\1\257\16\13\11\0\1\13\1\0\3\13"+
    "\11\0\2\13\1\0\2\13\11\0\6\13\1\260\22\13"+
    "\11\0\1\13\1\0\3\13\11\0\2\13\1\0\2\13"+
    "\11\0\15\13\1\261\13\13\11\0\1\13\1\0\3\13"+
    "\11\0\2\13\1\0\2\13\11\0\15\13\1\262\13\13"+
    "\11\0\1\13\1\0\3\13\11\0\2\13\1\0\2\13"+
    "\11\0\6\13\1\263\22\13\11\0\1\13\1\0\3\13"+
    "\11\0\1\13\1\264\1\0\2\13\11\0\31\13\15\0"+
    "\1\265\71\0\1\13\1\0\3\13\11\0\2\13\1\0"+
    "\2\13\11\0\2\13\1\266\26\13\11\0\1\13\1\0"+
    "\3\13\11\0\1\267\1\13\1\0\2\13\11\0\31\13"+
    "\11\0\1\13\1\0\3\13\11\0\2\13\1\0\2\13"+
    "\11\0\2\13\1\270\26\13\11\0\1\13\1\0\3\13"+
    "\11\0\2\13\1\0\2\13\11\0\23\13\1\271\5\13"+
    "\11\0\1\13\1\0\3\13\11\0\2\13\1\0\2\13"+
    "\11\0\10\13\1\272\20\13\16\0\1\273\70\0\1\13"+
    "\1\0\3\13\11\0\1\13\1\274\1\0\2\13\11\0"+
    "\31\13\11\0\1\13\1\0\3\13\11\0\1\13\1\275"+
    "\1\0\2\13\11\0\31\13\11\0\1\13\1\0\3\13"+
    "\11\0\2\13\1\0\2\13\11\0\24\13\1\276\4\13"+
    "\11\0\1\13\1\0\3\13\11\0\2\13\1\0\2\13"+
    "\11\0\15\13\1\277\13\13\17\0\1\300\67\0\1\13"+
    "\1\0\3\13\11\0\2\13\1\0\2\13\11\0\13\13"+
    "\1\301\15\13\11\0\1\13\1\0\3\13\11\0\2\13"+
    "\1\0\2\13\11\0\13\13\1\302\15\13\11\0\1\13"+
    "\1\0\3\13\11\0\1\303\1\13\1\0\2\13\11\0"+
    "\31\13\11\0\1\13\1\0\3\13\11\0\1\304\1\13"+
    "\1\0\2\13\11\0\31\13\20\0\1\305\66\0\1\13"+
    "\1\0\3\13\11\0\2\13\1\0\2\13\11\0\12\13"+
    "\1\306\16\13\10\0\1\307\76\0\1\13\1\0\3\13"+
    "\11\0\2\13\1\0\2\13\11\0\2\13\1\310\26\13"+
    "\21\0\1\311\65\0\1\13\1\0\3\13\11\0\1\13"+
    "\1\312\1\0\2\13\11\0\31\13\17\0\1\313\67\0"+
    "\1\13\1\0\3\13\11\0\2\13\1\0\2\13\11\0"+
    "\13\13\1\314\15\13\7\0\1\315\110\0\1\316\76\0"+
    "\1\317\76\0\1\320\76\0\1\321\76\0\1\322\67\0"+
    "\1\323\104\0\1\324\66\0\1\325\105\0\1\326\63\0"+
    "\1\327\110\0\1\330\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10292];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\4\1\1\11\5\1\6\11"+
    "\1\1\1\11\23\1\1\0\2\1\2\0\4\11\1\0"+
    "\1\1\1\0\1\11\31\1\1\11\1\1\3\0\2\1"+
    "\1\0\34\1\2\0\1\1\1\0\30\1\2\0\1\1"+
    "\1\0\20\1\1\0\1\1\1\11\13\1\1\0\5\1"+
    "\1\0\4\1\1\0\4\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\13\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int fila = 1;
    private int columna = 1;

    private Token newToken(TokenType type, String text) {
        Token token = new Token(type, text, fila, columna, UUID.randomUUID());
        columna += text.length();
        return token;
    }

    private Token newToken(TokenType type, String text, String tipoToken, Object valorToken) {
        Token token = new Token(type, fila, columna, UUID.randomUUID(), tipoToken, valorToken);
        columna += text.length();
        return token;
    }

  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { if (yytext().length() > 3) {
            return newToken(TokenType.TOKEN_UNKNOWN, yytext());
        }else{
            return newToken(TokenType.IDENTIFICADOR, yytext());
        }
          }
        case 57: break;
        case 17: 
          { return  newToken(TokenType.PARENTESIS_DE_CERRADURA, yytext());
          }
        case 58: break;
        case 54: 
          { return newToken(TokenType.CHARACTER, yytext());
          }
        case 59: break;
        case 3: 
          { return newToken(TokenType.ASIGNACION_DE_COLOR, yytext());
          }
        case 60: break;
        case 15: 
          { return newToken(TokenType.LLAVE_DE_CERRADURA, yytext());
          }
        case 61: break;
        case 51: 
          { return newToken(TokenType.BREAKER, yytext());
          }
        case 62: break;
        case 10: 
          { return newToken(TokenType.MENOR_QUE, yytext());
          }
        case 63: break;
        case 25: 
          { return newToken(TokenType.MAYOR_O_IGUAL_QUE, yytext());
          }
        case 64: break;
        case 32: 
          { return newToken(TokenType.BOOLEANO, yytext());
          }
        case 65: break;
        case 24: 
          { return newToken(TokenType.MENOR_O_IGUAL_QUE, yytext());
          }
        case 66: break;
        case 55: 
          { return newToken(TokenType.BACKGROUND, yytext());
          }
        case 67: break;
        case 45: 
          { return newToken(TokenType.PUBLIC, yytext());
          }
        case 68: break;
        case 50: 
          { return newToken(TokenType.SCREEN, yytext());
          }
        case 69: break;
        case 6: 
          { return newToken(TokenType.MULTIPLICACION, yytext());
          }
        case 70: break;
        case 31: 
          { return newToken(TokenType.FOR, yytext());
          }
        case 71: break;
        case 1: 
          { return newToken(TokenType.TOKEN_UNKNOWN, yytext());
          }
        case 72: break;
        case 26: 
          { return newToken(TokenType.OPERADOR_DE_AUMENTO, yytext());
          }
        case 73: break;
        case 42: 
          { return newToken(TokenType.SOUND, yytext());
          }
        case 74: break;
        case 14: 
          { return newToken(TokenType.LLAVE_DE_APERTURA, yytext());
          }
        case 75: break;
        case 34: 
          { return newToken(TokenType.TRUE, yytext(), "BOOLEANO", true);
          }
        case 76: break;
        case 16: 
          { return  newToken(TokenType.PARENTESIS_DE_APERTURA, yytext());
          }
        case 77: break;
        case 49: 
          { return newToken(TokenType.DEFINE, yytext());
          }
        case 78: break;
        case 40: 
          { return newToken(TokenType.FALSE, yytext(), "BOOLEANO", false);
          }
        case 79: break;
        case 33: 
          { return newToken(TokenType.SHOW, yytext());
          }
        case 80: break;
        case 44: 
          { return newToken(TokenType.COLOR_HEX, yytext());
          }
        case 81: break;
        case 19: 
          { return newToken(TokenType.COMA, yytext());
          }
        case 82: break;
        case 21: 
          { return newToken(TokenType.DIVISION, yytext());
          }
        case 83: break;
        case 12: 
          { return newToken(TokenType.SUMA, yytext());
          }
        case 84: break;
        case 20: 
          { return newToken(TokenType.ASIGNACION, yytext());
          }
        case 85: break;
        case 53: 
          { return newToken(TokenType.STOP_SOUND, yytext());
          }
        case 86: break;
        case 13: 
          { 
            Object valorToken = null;
            String tipotoken = null;
            try {
              valorToken = Integer.parseInt( yytext());
              tipotoken = "INT";
            } catch (Exception e) {
              try {
                valorToken = Double.parseDouble( yytext());
                tipotoken = "DOUBLE";
              } catch (Exception ex) {
                return newToken(TokenType.TOKEN_UNKNOWN, yytext());
              }
            }
            return newToken(TokenType.NUMERO, yytext(), tipotoken, valorToken);
          }
        case 87: break;
        case 56: 
          { return newToken(TokenType.MEMORY_MANAGEMENT, yytext());
          }
        case 88: break;
        case 23: 
          { 
            String valorToken = null;
            try {
              valorToken = yytext();
            } catch (Exception e) {
              // TODO: handle exception
            }
            return newToken(TokenType.CADENA, yytext(), "CADENA", valorToken);
          }
        case 89: break;
        case 46: 
          { return newToken(TokenType.STATIC, yytext());
          }
        case 90: break;
        case 29: 
          { return newToken(TokenType.GO, yytext());
          }
        case 91: break;
        case 41: 
          { return newToken(TokenType.COLOR, yytext());
          }
        case 92: break;
        case 18: 
          { return newToken(TokenType.PUNTO_Y_COMA, yytext());
          }
        case 93: break;
        case 47: 
          { return newToken(TokenType.STRING, yytext());
          }
        case 94: break;
        case 30: 
          { return newToken(TokenType.INT, yytext());
          }
        case 95: break;
        case 52: 
          { return newToken(TokenType.PLAY_SOUND, yytext());
          }
        case 96: break;
        case 36: 
          { return newToken(TokenType.MAIN, yytext());
          }
        case 97: break;
        case 39: 
          { return newToken(TokenType.MENU, yytext());
          }
        case 98: break;
        case 4: 
          { fila++;
        columna = 1;
        // Resto del código para hacer algo con el salto de línea si es necesario
          }
        case 99: break;
        case 9: 
          { return  newToken(TokenType.DOS_PUNTOS, yytext());
          }
        case 100: break;
        case 37: 
          { return newToken(TokenType.ELSE, yytext());
          }
        case 101: break;
        case 27: 
          { return newToken(TokenType.IGUALACION, yytext());
          }
        case 102: break;
        case 28: 
          { return newToken(TokenType.IF, yytext());
          }
        case 103: break;
        case 43: 
          { return newToken(TokenType.IMAGE, yytext());
          }
        case 104: break;
        case 5: 
          { fila += yytext().chars().filter(ch -> ch == '\n').count();
        columna = 1;
          }
        case 105: break;
        case 2: 
          { int numEspacios = yytext().length();
        columna += numEspacios;
          }
        case 106: break;
        case 11: 
          { return newToken(TokenType.MAYOR_QUE, yytext());
          }
        case 107: break;
        case 38: 
          { return newToken(TokenType.HIDE, yytext());
          }
        case 108: break;
        case 48: 
          { return newToken(TokenType.DOUBLE, yytext());
          }
        case 109: break;
        case 35: 
          { return newToken(TokenType.VOID, yytext());
          }
        case 110: break;
        case 8: 
          { return newToken(TokenType.RESTA, yytext());
          }
        case 111: break;
        case 22: 
          { 
          }
        case 112: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
